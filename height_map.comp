#version 460 core

#define OCT 32

// constants
const float PHI = 1.61803398874989484820459;
const float HALF_PI = 1.57079632679489661923;

// images
layout(rgba32f, binding = 0) uniform image2D imgOutput;

// variables
layout(location = 0) uniform ivec2 seed;

// functions
/*float gold_noise(in vec2 xy, in float seed)
{
    return fract(fract(tan(mod(distance(xy * PHI, xy) * seed, HALF_PI - .001)) * xy.x) / 127.4 * 128.0);
}*/

float hash( ivec3 p )
{
    // 3D -> 1D
    int n = p.x*3 + p.y*113 + p.z*311;

    // 1D hash by Hugo Elias
	n = (n << 13) ^ n;
    n = n * (n * n * 15731 + 789221) + 1376312589;
    return float( n & ivec3(0x0fffffff))/float(0x0fffffff);
}

float noise( in vec2 x, in float scale = 1.0)
{
    x *= scale;
    ivec3 i = ivec3(floor(x), 0);
    vec3 f = vec3(fract(x), 0.0);
    f = f*f*(3.0-2.0*f);
	
    return mix(mix(mix( hash(i+ivec3(0,0,0)), 
                        hash(i+ivec3(1,0,0)),f.x),
                   mix( hash(i+ivec3(0,1,0)), 
                        hash(i+ivec3(1,1,0)),f.x),f.y),
               mix(mix( hash(i+ivec3(0,0,1)), 
                        hash(i+ivec3(1,0,1)),f.x),
                   mix( hash(i+ivec3(0,1,1)), 
                        hash(i+ivec3(1,1,1)),f.x),f.y),f.z);
}

layout (local_size_x = 32, local_size_y = 32, local_size_z = 1) in;
void main()
{
    vec4 value = vec4(0.0, 0.0, 0.0, 1.0);

    ivec2 coord = ivec2(gl_GlobalInvocationID.xy);
    ivec2 world_coord = seed + coord;
    vec2 UV = coord.xy / (gl_NumWorkGroups.xy * gl_WorkGroupSize.xy);
    
    /*
    value.x = gold_noise(coord.xy, t + .0);
    value.y = gold_noise(coord.xy, t + .1);
    value.z = gold_noise(coord.xy, t + .2);
    */

    float scale = 1.;
    float default_scale = .00825;

    float weight = 1.0;
    float sum = 0.;

    mat2 rot_sum = mat2(1.0);
    mat2 rot_mat = mat2(4. / 5., 3. / 5., -3. / 5., 4. / 5.);
    for (int i = 0; i < OCT; i++)
    {
        value.xyz += vec3(noise(world_coord.xy * rot_sum, default_scale * scale)) * weight;
        
        scale *= 2.;
        sum += weight;
        weight *= .5;
        rot_sum *= rot_mat;
    }
    value.xyz /= sum;
	
    imageStore(imgOutput, coord, value);
}